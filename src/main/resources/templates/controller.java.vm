package templates;

{package.Controller};

import cn.hutool.core.lang.Snowflake;
import cn.luxf.api.Result;
import ${package.Entity}.${entity};
## import cn.luxf.demo.model.page.${entity}ReqPageVO;
import cn.luxf.demo.model.vo.$!{custom}.req.${entity}ReqVO;
import $!{package.Service}.$!{table.serviceName};
## import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
## import com.baomidou.mybatisplus.core.toolkit.Wrappers;
## import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;
import org.springframework.beans.BeanUtils;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
    #if(${superControllerClassPackage})
import ${superControllerClassPackage};
    #end

import javax.annotation.Resource;
import javax.validation.Valid;
## import java.util.Map;

/**
 * <p>
 * $!{table.comment} 前端控制器
 * </p>
 *
 * @author ${author}
 * @since ${date}
 */
#if(${restControllerStyle})
@RestController
#else
@Controller
#end
@RequestMapping("#if(${package.ModuleName})/${package.ModuleName}#end/#if(${controllerMappingHyphenStyle})${controllerMappingHyphen}#else${table.entityPath}#end")
@Api(value = "$!{table.comment}", tags = "$!{table.comment}管理")
@Validated
#if(${kotlin})
class ${table.controllerName}#if(${superControllerClass}) : ${superControllerClass}()#end
#else
    #if(${superControllerClass})
public class ${table.controllerName} extends ${superControllerClass} {
    #else
public class ${table.controllerName} {
    #end

    @Resource
    private $!{table.serviceName} $!{table.entityPath}Service;

    @Resource
    private Snowflake idWorker;

    /**
     * 新增 $!{table.entityName}
     *
     * @param req req
     * @return Result
     */
    @PostMapping
    @ApiOperation(value = "新增 $!{table.comment}")
    public Result<$!{table.entityName}> create(@Valid @RequestBody ${entity}ReqVO req) {
        ${entity} entity = new ${entity}();
        BeanUtils.copyProperties(req, entity);
        entity.setId(idWorker.nextIdStr());
        boolean saved = $!{table.entityPath}Service.save(entity);
        return saved ? Result.success(entity) : Result.failure();
    }

    /**
     * 根据ID删除 $!{table.entityName}
     *
     * @param id id
     * @return Result
     */
    @DeleteMapping("/{id}")
    @ApiOperation(value = "根据ID删除 $!{table.comment}")
    @ApiImplicitParams({
            @ApiImplicitParam(name = "id", required = true, paramType = "path"),
    })
    public Result<String> deleteById(@PathVariable String id) {
        boolean removed = $!{table.entityPath}Service.removeById(id);
        return removed ? Result.success() : Result.failure();
    }

    /**
     * 根据ID修改 $!{table.entityName}
     *
     * @param id id
     * @return Result
     */
    @PutMapping("/{id}")
    @ApiOperation(value = "根据ID修改 $!{table.comment}")
    @ApiImplicitParams({
            @ApiImplicitParam(name = "id", required = true, paramType = "path"),
    })
    public Result<String> updateById(@PathVariable String id, @Valid @RequestBody ${entity}ReqVO req) {
        ${entity} entity = new ${entity}();
        BeanUtils.copyProperties(req, entity);
        entity.setId(id);
        boolean updated = $!{table.entityPath}Service.updateById(entity);
        return updated ? Result.success() : Result.failure();
    }

    /**
     * 根据ID查询 $!{table.entityName}
     *
     * @param id id
     * @return Result
     */
    @GetMapping("/{id}")
    @ApiOperation(value = "根据ID查询 $!{table.comment}信息")
    @ApiImplicitParams({
            @ApiImplicitParam(name = "id", required = true, paramType = "path"),
    })
    public Result<$!{table.entityName}> getById(@PathVariable String id) {
        return Result.success($!{table.entityPath}Service.getById(id));
    }
}

#end